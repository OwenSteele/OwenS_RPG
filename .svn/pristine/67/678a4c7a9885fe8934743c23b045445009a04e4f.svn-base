using Engine.Models;
using Engine.Factories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel;
using Engine.EventArgs;

namespace Engine.ViewModels
{
    public class GameSession : BaseNotificationClass
    {
        public event EventHandler<GameMessageEventArgs> OnMessageRaised;

        #region player, location, world, monster | properties
        private Player _currentPlayer;
        private Location _currentLocation;
        private World _currentWorld;
        private Monster _currentMonster;

        public Player CurrentPlayer
        {
            get { return _currentPlayer; }
            set 
            { 
                _currentPlayer = value;
                OnPropertyChanged(nameof(CurrentPlayer));
            }
        }
        public Location CurrentLocation
        {
            get { return _currentLocation; }
            set
            {
                _currentLocation = value;
                OnPropertyChanged(nameof(CurrentLocation));
                OnPropertyChanged(nameof(HasLocationToNorth));
                OnPropertyChanged(nameof(HasLocationToWest));
                OnPropertyChanged(nameof(HasLocationToEast));
                OnPropertyChanged(nameof(HasLocationToSouth));

                GivePlayerQuestAtLocation();
                GetMonsterAtLocation();
            }
        }
        public World CurrentWorld
        {
            get { return _currentWorld; }
            set
            {
                _currentWorld = value;
                OnPropertyChanged(nameof(CurrentWorld));
            }
        }
        public Monster CurrentMonster
        {
            get { return _currentMonster; }
            set
            {
                _currentMonster = value;
                OnPropertyChanged(nameof(CurrentMonster));
                OnPropertyChanged(nameof(HasMonster));

                if (CurrentMonster != null) RaiseMessage($"\nYou have encountered a {CurrentMonster.Name}");
            }
        }

        public Weapon CurrentWeapon { get; set; }
        #endregion

        #region Has checks
        #region location
        public bool HasLocationToNorth
        {
            get { return CurrentWorld.LocationAt(CurrentLocation.XCoordinate, CurrentLocation.YCoordinate + 1) != null; }
        }
        public bool HasLocationToWest
        {
            get { return CurrentWorld.LocationAt(CurrentLocation.XCoordinate - 1, CurrentLocation.YCoordinate) != null; }
        }
        public bool HasLocationToEast
        {
            get { return CurrentWorld.LocationAt(CurrentLocation.XCoordinate + 1, CurrentLocation.YCoordinate) != null; }
        }
        public bool HasLocationToSouth
        {
            get { return CurrentWorld.LocationAt(CurrentLocation.XCoordinate, CurrentLocation.YCoordinate - 1) != null; }
        }
        #endregion
        #region monster
        public bool HasMonster => CurrentMonster != null;
        #endregion
        #endregion

        public GameSession()
        {
            CurrentPlayer = new Player 
            {
                Name = "Owen", 
                CharacterClass = "Fighter", 
                HitPoints = 100, 
                Gold = 100, 
                ExperiencePoints = 0, 
                Level = 1
            };

            if (!CurrentPlayer.Weapons.Any()) CurrentPlayer.AddItemToInventory(ItemFactory.CreateGameItem(1001));

            CurrentWorld = WorldFactory.CreateWorld();

            CurrentLocation = CurrentWorld.LocationAt(0, 0);
        }

        #region movement
        public void MoveNorth()
        {
            if(HasLocationToNorth)
                CurrentLocation = CurrentWorld.LocationAt(CurrentLocation.XCoordinate, CurrentLocation.YCoordinate + 1);
        }
        public void MoveWest()
        {
            if (HasLocationToWest)
                CurrentLocation = CurrentWorld.LocationAt(CurrentLocation.XCoordinate-1, CurrentLocation.YCoordinate);
        }
        public void MoveEast()
        {
            if (HasLocationToEast)
                CurrentLocation = CurrentWorld.LocationAt(CurrentLocation.XCoordinate+1, CurrentLocation.YCoordinate);
        }
        public void MoveSouth()
        {
            if (HasLocationToSouth)
                CurrentLocation = CurrentWorld.LocationAt(CurrentLocation.XCoordinate, CurrentLocation.YCoordinate - 1);
        }
        #endregion

        #region actions
        public void AttackCurrentMonster()
        {
            if (CurrentWeapon.Equals(null))
            {
                RaiseMessage("You need to select a weapon to attack!");
                return;
            }
            //Calculate the damage to the monster
            int damageToMonster = RandomNumberGenerator.NumberBetween(CurrentWeapon.MinimumDamage, CurrentWeapon.MaximumDamage);
            
            if (damageToMonster == 0) RaiseMessage(
                $"You used you {CurrentWeapon.Name} to try to attack the {CurrentMonster.Name}," +
                $" but {CurrentPlayer.MissedAttack()}");
            else
            {
                CurrentMonster.HitPoints -= damageToMonster;
                RaiseMessage($"You hit the {CurrentMonster.Name}, doing {damageToMonster} damage!");
            }

            //check if the monster has been killed
            if (CurrentMonster.HitPoints <= 0)
            {
                RaiseMessage($"\nYou have defeated the {CurrentMonster.Name}!");

                CurrentPlayer.ExperiencePoints += CurrentMonster.RewardExperiencePoints;
                RaiseMessage($"You have recieved {CurrentMonster.RewardExperiencePoints} experience.");
                CurrentPlayer.Gold += CurrentMonster.RewardGold;
                RaiseMessage($"You have recieved {CurrentMonster.RewardGold} gold." +
                    $"\nThe {CurrentMonster.Name} dropped:");

                foreach(ItemQuantity itemQuantity in CurrentMonster.Inventory)
                {
                    GameItem item = ItemFactory.CreateGameItem(itemQuantity.ItemID);
                    CurrentPlayer.AddItemToInventory(item);
                    RaiseMessage($"{itemQuantity.Quantity}x {item.Name}");
                }

                //next monster to fight
                GetMonsterAtLocation();
            }
            //if monster still alive, it attacks
            else
            {
                int damageToPlayer = RandomNumberGenerator.NumberBetween(CurrentMonster.MinimumDamage, CurrentMonster.MaximumDamage);

                if (damageToPlayer == 0)
                {
                    RaiseMessage($"The {CurrentMonster.Name} attacks, but misses you.");
                }
                else
                {
                    CurrentPlayer.HitPoints -= damageToPlayer;
                    RaiseMessage($"The {CurrentMonster.Name} attacks, taking {damageToPlayer} hit points!");
                }

                //if the player dies, move them back to their home
                if(CurrentPlayer.HitPoints <= 0)
                {
                    RaiseMessage($"The {CurrentMonster.Name} has killed you!");

                    CurrentLocation = CurrentWorld.LocationAt(0, -1);
                    CurrentPlayer.HitPoints = CurrentPlayer.Level * 100;
                    if (CurrentPlayer.Gold >= 10) CurrentPlayer.Gold -= 10;
                    else CurrentPlayer.Gold = 0;
                }

            }
        }
        #endregion

        #region 'At Location'
        private void GivePlayerQuestAtLocation()
        {
            foreach (Quest quest in CurrentLocation.QuestsAvailableHere)
                if (!CurrentPlayer.Quests.Any(q => q.PlayerQuest.ID == quest.ID))
                    CurrentPlayer.Quests.Add(new QuestStatus(quest));
        }
        private void GetMonsterAtLocation()
        {
            CurrentMonster = CurrentLocation.GetMonster();
        }
        #endregion

        #region custom buttons
        public string ButtonNorth { get { return Button.North; } }
        public string ButtonWest { get { return Button.West; } }
        public string ButtonEast { get { return Button.East; } }
        public string ButtonSouth { get { return Button.South; } }
        #endregion

        #region Message Event
        private void RaiseMessage(string message)
        {
            OnMessageRaised?.Invoke(this, new GameMessageEventArgs(message));
        }
        #endregion 
    }
}
