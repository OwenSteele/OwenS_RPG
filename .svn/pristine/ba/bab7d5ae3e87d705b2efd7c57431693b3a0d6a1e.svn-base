using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Engine.Models
{
    /// <summary>
    /// To have the MainWindow.xaml auto update when the property is changed, need INotifyPropertyChanged. 
    /// INotifyPropertyChanged needs an event handler, PropertyChangedEventHandler, that invokes the change to the property from an event.
    /// But this means auto-properties cannot be used, need priavte variables and defined getters and setters
    /// 
    /// 
    /// </summary>
    public class Player : BaseNotificationClass
    {
        #region properties and constructors
        private string _name;
        private string _characterClass;
        private int _hitPoints;
        private int _experiencePoints;
        private int _level;
        private int _gold;


        public string Name
        {
            get { return _name; }
            set
            {
                _name = value;
                OnPropertyChanged(nameof(Name));
            }
        }
        public string CharacterClass
        {
            get { return _characterClass; }
            set
            {
                _characterClass = value;
                OnPropertyChanged(nameof(CharacterClass));
            }
        }
        public int HitPoints
        {
            get { return _hitPoints; }
            set
            {
                _hitPoints = value;
                OnPropertyChanged(nameof(HitPoints));
            }
        }
        public int ExperiencePoints 
        { 
            get { return _experiencePoints; }
            set 
            { 
                _experiencePoints = value;
                OnPropertyChanged(nameof(ExperiencePoints)); 
            } 
        }
        public int Level
        {
            get { return _level; }
            set
            {
                _level = value;
                OnPropertyChanged(nameof(Level));
            }
        }
        public int Gold
        {
            get { return _gold; }
            set
            {
                _gold = value;
                OnPropertyChanged(nameof(Gold));
            }
        }
        #endregion 

        public List<GameItem> Weapons => Inventory.Where(i => i is Weapon).ToList();
        public List<PlayerInteraction> Interactions { get; set; }
        public ObservableCollection<GameItem> Inventory { get; set; } //dont need OnPropertyChanged with ObservableCollection
        public ObservableCollection<QuestStatus> Quests { get; set; }
        public Player()
        {
            Inventory = new ObservableCollection<GameItem>();
            Quests = new ObservableCollection<QuestStatus>();
            Interactions = new List<PlayerInteraction>();
        }
        public void AddItemToInventory(GameItem item)
        {
            Inventory.Add(item);
            OnPropertyChanged(nameof(Weapons));
        }
        public string MissedAttack()
        {
            string[] missedAttacks = (from i in Interactions 
                                      where (i.InteractionType == 0) 
                                      where (i.InteractionTypeCondition == false) 
                                      select (string[])i.InteractionTypeMessages).First();
            return missedAttacks[RandomNumberGenerator.NumberBetween(0, missedAttacks.Length - 1)];
        }
    }
}
