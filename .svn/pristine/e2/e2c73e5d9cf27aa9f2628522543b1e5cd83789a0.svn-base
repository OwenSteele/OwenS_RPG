using Engine.Actions;
using Engine.Models;
using System.Collections.Generic;
using System.Linq;

namespace Engine.Factories
{
    public static class ItemFactory
    {
        private static readonly List<GameItem> _standardgameItems = new List<GameItem>();

        static ItemFactory()
        {
            //player weapons
            BuildWeapon(1001, "Pointy Stick", 1, 1, 2);
            BuildWeapon(1002, "Rusty Sword", 5, 2, 3);

            //monster weapons
            BuildWeapon(1501, "Snake Fangs", 0, 0, 2);
            BuildWeapon(1502, "Rat Claws", 0, 0, 2);
            BuildWeapon(1503, "Spider Fangs", 0, 0, 4);

            //consumables
            BuildHealingItem(2001, "Granola Bar", 5, 2);
            BuildHealingItem(2002, "Magic Stars", 10, 4);
            BuildHealingItem(2010, "Small Healing Potion", 100, 30);
            BuildHealingItem(2011, "Large Healing Potion", 200, 70);

            //recipe items
            BuildMiscellaneous(3001, "Oats", 1);
            BuildMiscellaneous(3002, "Honey", 2);
            BuildMiscellaneous(3003, "Raisins", 1);
            BuildMiscellaneous(3004, "Cacao", 2);
            BuildMiscellaneous(3005, "Milk", 1);
            BuildMiscellaneous(3006, "Children Tears", 1000);
            //purchasable recipes
            BuildRecipeItem(3501, "Granola Bar Recipe", 20, 1);
            BuildRecipeItem(3502, "Magic Stars Recipe", 1, 2);

            //monster drops
            BuildMiscellaneous(9001, "Snake Fang", 1);
            BuildMiscellaneous(9002, "Snakeskin", 2);
            BuildMiscellaneous(9003, "Rat tail", 1);
            BuildMiscellaneous(9004, "Rat fur", 2);
            BuildMiscellaneous(9005, "Spider fang", 1);
            BuildMiscellaneous(9006, "Spider silk", 2);
        }

        public static GameItem CreateGameItem(int itemTypeID)
        {
            return _standardgameItems.FirstOrDefault(item => item.ItemTypeID == itemTypeID).Clone();
        }

        public static string ItemName(int itemTypeID)
        {
            return _standardgameItems.FirstOrDefault(i => i.ItemTypeID == itemTypeID)?.Name ?? "";
        }

        #region build functions
        private static void BuildMiscellaneous(int id, string name, int price) =>
            _standardgameItems.Add(new GameItem(GameItem.ItemCategory.Miscellaneous, id, name, price));
        private static void BuildWeapon(int id, string name, int price, int minimumDamage, int maximumDamage)
        { 
            GameItem weapon = new GameItem(GameItem.ItemCategory.Weapon, id, name, price, true);
            weapon.Action = new AttackWithWeapon(weapon, minimumDamage, maximumDamage);
            _standardgameItems.Add(weapon);
        }
        private static void BuildHealingItem(int id, string name,  int price, int hitPointsToHeal)
        {
            GameItem item = new GameItem(GameItem.ItemCategory.Consumable, id, name, price);
            item.Action = new Heal(item, hitPointsToHeal);
            _standardgameItems.Add(item);
        }
        private static void BuildRecipeItem(int id, string name, int price, int recipeID)
        {
            GameItem item = new GameItem(GameItem.ItemCategory.Recipe, id, name, price, true);
            item.RecipeID = recipeID;
            _standardgameItems.Add(item);
        }
        #endregion
    }
}
