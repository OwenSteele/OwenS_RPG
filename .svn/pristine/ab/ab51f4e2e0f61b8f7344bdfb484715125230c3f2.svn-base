using System;
using Engine.Models;

namespace Engine.Actions
{
    public class AttackWithWeapon : BaseAction, IAction
    {
        private readonly int _miminumDamage;
        private readonly int _maximumDamage;

        public AttackWithWeapon(GameItem itemInUse, int minimumDamage, int maximumDamage) : base(itemInUse)
        {
            if (itemInUse.Category != GameItem.ItemCategory.Weapon)
                throw new ArgumentException($"{itemInUse.Name} is not a weapon.");
            if (_miminumDamage < 0)
                throw new ArgumentException("ERROR: min. damage cannot be less than 0.");
            if (_maximumDamage < _miminumDamage)
                throw new ArgumentException("Error: max. damage must be more than or equal to min. damage.");

            _miminumDamage = minimumDamage;
            _maximumDamage = maximumDamage;
        }

        public void Execute(LivingEntity actor, LivingEntity target)
        {
            int damage = RandomNumberGenerator.NumberBetween(_miminumDamage, _maximumDamage);

            string actorName = (actor is Player) ? "You" : $"The {actor.Name.ToLower()}";
            string targetName = (target is Player) ? "you" : $"the {target.Name.ToLower()}";

            if (damage == 0)
                ReportResult($"{actorName} missed {targetName}.");
            else
            {
                ReportResult($"{actorName} did {damage} point{((damage > 1)? "s":"")} of damage to {targetName}.");
                target.TakeDamage(damage);            
            }
        }
    }
}
